[build-system]
# Use a standard, modern build backend like setuptools or hatchling
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "regrank"
version = "0.2.30"
description = "Regularized methods for efficient ranking in networks"
authors = [{ name = "Tzu-Chi Yen", email = "tzuchi.yen@colorado.edu" }]
license = "LGPL-3.0-or-later"
readme = "README.md"
requires-python = ">=3.11,<3.14"
keywords = [
    "network-analysis",
    "convex-optimization",
    "ranking-algorithm",
    "proximal-gradient-method",
    "denoising",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]


# --- Core Dependencies ---
# PEP 621 format: list of strings, not a table.
dependencies = [
    "cvxpy>=1.7.1",
    "scipy>=1.16.1",
    "numpy>=2.2.6",
    "numba>=0.61.2",
    "scikit-learn>=1.7.1",
    "distinctipy>=1.3.4",
    "prettytable>=3.16.0",
    "pooch>=1.8.2",
    "matplotlib>=3.10.5",
    "zstandard>=0.24.0",
    "marimo>=0.15.0",
]
# Project URLs for PyPI display
[project.urls]
Homepage = "https://github.com/junipertcy/regrank"
Repository = "https://github.com/junipertcy/regrank"
Documentation = "https://docs.netscied.tw/regrank/index.html"


# --- Development and Tooling Dependencies ---
[project.optional-dependencies]
dev = [
    # Linting & Formatting
    "black>=25.1.0",
    "ruff>=0.12.10",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    # Testing
    "pytest>=8.4.1",
    "pytest-docker>=3.2.3",
    # Documentation
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.1",
    "numpydoc>=1.9.0",
    "sphinx-markdown-tables>=0.0.17",
    "mathjax>=0.1.2",
    "intersphinx-registry>=0.2501.23",
    "types-docutils>=0.22.0.20250822",
    # Interactive Development & Profiling
    "marimo>=0.15.0",
    "scalene>=1.5.53",
]

# --- Tool Configurations ---

[tool.setuptools.packages.find]
# Ensure setuptools finds your package correctly
include = ["regrank*"]
exclude = ["tests*"]

[tool.ruff]
# Inherit settings from the [tool.ruff.lint] and [tool.ruff.format] sections below
target-version = "py311"

[tool.ruff.format]
# Recommended modern formatting setting
preview = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit (security)
    "PT", # pytest style
]
ignore = [
    "E501", # Handled by Black/Ruff formatter
    "C901", # Allow complex functions (common in scientific code)
    "B008", # Do not complain about function calls as default arguments
    "S101", # Ignore "assert" statements, which are fine in tests
]
# Keep your project-specific ignores
per-file-ignores = { "tests/*" = ["S101"] }

[tool.ruff.lint.isort]
known-first-party = ["regrank", "tests"]

[tool.mypy]
ignore_missing_imports = true
python_version = "3.11"
# Add these for stricter type checking, inspired by graphrag
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v -ra --strict-markers"
filterwarnings = [
    "error",
    "ignore:The 'SpringRankLegacy' class is deprecated:DeprecationWarning",
]
norecursedirs = ["docs", "build", ".venv", "dist"]
junit_family = "xunit2"

# The pixi config remains unchanged.
[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
regrank = { path = ".", editable = true }

[tool.marimo.runtime]
pythonpath = ["src"]
